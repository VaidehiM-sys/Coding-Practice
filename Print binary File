class Solution {
    List<List<String>> result;
    int column;
    public List<List<String>> printTree(TreeNode root) {
        int height = findHeight(root)-1;
        result = new ArrayList<>();
        column = (int)Math.pow(2,height+1) - 1; 
        helper(root, 0  , column - 1, 0);
        return result;
    }
    private void helper(TreeNode root, int left, int right, int row){
        if(root == null) return ;
        if(result.isEmpty() || result.size() == row) {
            List<String> list= new ArrayList<>();
            for(int i = 0; i < column ; i++){
                list.add("");
            }
            result.add(list);
        }
        int mid = (left+right)/2;
        result.get(row).set(mid, ""+root.val);



        helper(root.left,left,mid-1, row+1);
        helper(root.right, mid+1, right, row+1);

    }
    private int findHeight(TreeNode root){
        if(root == null)return 0;
        int left = findHeight(root.left);
        int right = findHeight(root.right);
        return 1+Math.max(left,right);
    }
}
